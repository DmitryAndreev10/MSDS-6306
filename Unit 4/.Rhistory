###Predict test data###
SalePrice <- predict(LR_Model_Forward, House_Price_Test)
House_Price_Test_Predict_Forward <- cbind(House_Price_Test, SalePrice)
House_Price_Test_Predict_Forward$SalePrice <- pmax(SalePrice, 10000)
House_Price_Test_Predict_Forward$SalePrice[is.na(SalePrice)] <- 10000
House_Price_Test_Predict_Forward
##Keep only ID and Predict SalesPrice Column
House_Price_Test_Predict_Forward_Export <- House_Price_Test_Predict[,c(1,81)]
##Keep only ID and Predict SalesPrice Column
House_Price_Test_Predict_Forward_Export <- House_Price_Test_Forward_Predict[,c(1,81)]
##Keep only ID and Predict SalesPrice Column
House_Price_Test_Predict_Forward_Export <- House_Price_Test_Predict_Forward[,c(1,81)]
write.csv(House_Price_Test_Predict_Forward_Export, "C:/Users/Dmitr/Desktop/MSDS 6371 - 401/Project/R Output/House_Price_Forward_Test_Predict.csv", row.names = FALSE)
#Backward Variable Selection
stepAIC(full, data = House_Price_Train, direction = "backward")$anova
#Linear Regression Model for Forward Selection
LR_Model_Backward <- lm(SalePrice ~ LotArea + OverallQual + YearBuilt + YearRemodAdd +
MasVnrArea + BsmtFinSF1 + TotalBsmtSF + FirstFlrSF + GrLivArea +
BsmtFullBath + BedroomAbvGr + KitchenAbvGr + TotRmsAbvGrd +
Fireplaces + GarageYrBlt + GarageCars + WoodDeckSF)
#Linear Regression Model for Forward Selection
LR_Model_Backward <- lm(SalePrice ~ LotArea + OverallQual + YearBuilt + YearRemodAdd +
MasVnrArea + BsmtFinSF1 + TotalBsmtSF + FirstFlrSF + GrLivArea +
BsmtFullBath + BedroomAbvGr + KitchenAbvGr + TotRmsAbvGrd +
Fireplaces + GarageYrBlt + GarageCars + WoodDeckSF, data = House_Price_Train_Numerical)
summary(LR_Model_Backward)
plot(LR_Model_Backward)
###Predict test data###
SalePrice <- predict(LR_Model_Backward, House_Price_Test)
House_Price_Test_Predict_Backward <- cbind(House_Price_Test, SalePrice)
House_Price_Test_Predict_Backward$SalePrice <- pmax(SalePrice, 10000)
House_Price_Test_Predict_Backward$SalePrice[is.na(SalePrice)] <- 10000
House_Price_Test_Predict_Backward
##Keep only ID and Predict SalesPrice Column
House_Price_Test_Predict_Backward_Export <- House_Price_Test_Predict_Backward[,c(1,81)]
write.csv(House_Price_Test_Predict_Backward_Export, "C:/Users/Dmitr/Desktop/MSDS 6371 - 401/Project/R Output/House_Price_Forward_Test_Predict.csv", row.names = FALSE)
write.csv(House_Price_Test_Predict_Backward_Export, "C:/Users/Dmitr/Desktop/MSDS 6371 - 401/Project/R Output/House_Price_Backward_Test_Predict.csv", row.names = FALSE)
write.csv(House_Price_Test_Predict_Forward_Export, "C:/Users/Dmitr/Desktop/MSDS 6371 - 401/Project/R Output/House_Price_Forward_Test_Predict.csv", row.names = FALSE)
##### Stepwise Variable Selection #####
stepAIC(null, scope = list(upper = full), data = House_Price_Train, direction = "both")$anova
#Linear Regression Model for Forward Selection
LR_Model_Stepwise <- lm(SalePrice ~ OverallQual + GrLivArea + BsmtFinSF1 + GarageCars +
KitchenAbvGr + FirstFlrSF + YearRemodAdd + LotArea + MasVnrArea +
WoodDeckSF + TotRmsAbvGrd + BedroomAbvGr + YearBuilt + BsmtFullBath +
Fireplaces + TotalBsmtSF, data = House_Price_Train_Numerical)
summary(LR_Model_Stepwise)
plot(LR_Model_Stepwise)
###Predict test data###
SalePrice <- predict(LR_Model_Stepwise, House_Price_Test)
House_Price_Test_Predict_Stepwise <- cbind(House_Price_Test, SalePrice)
House_Price_Test_Predict_Stepwise$SalePrice <- pmax(SalePrice, 10000)
House_Price_Test_Predict_Stepwise$SalePrice[is.na(SalePrice)] <- 10000
House_Price_Test_Predict_Stepwise
##Keep only ID and Predict SalesPrice Column
House_Price_Test_Predict_Stepwise_Export <- House_Price_Test_Predict_Stepwise[,c(1,81)]
write.csv(House_Price_Test_Predict_Stepwise_Export, "C:/Users/Dmitr/Desktop/MSDS 6371 - 401/Project/R Output/House_Price_Stepwise_Test_Predict.csv", row.names = FALSE)
House_Price_Train.glm <- glm(SalePrice ~ OverallQual+GrLivArea+FirstFlrSF+GarageArea+GarageCars+TotalBsmtSF, data = House_Price_Train_Numerical)
cv.err <- cv.glm(House_Price_Train_Numerical, House_Price_Train.glm)$delta
cv.err
cv.err.6 <- cv.glm(House_Price_Train_Numerical, House_Price_Train.glm, K = 6)$delta
cv.err.6
summary(LR_Model_Forward)
summary(LR_Model_Backward)
summary(LR_Model_Stepwise)
summary(LR_Model)
plot(House_Price_Train$MasVnrType)
hist(House_Price_Train$MasVnrType)
boxplot(House_Price_Train$MasVnrArea)
plot(House_Price_Train$MasVnrArea)
###MasVnrArea
#Most of the houses Masonry veneer area is 0, so, i'll replacing values with 0
hist(House_Price_Train$MasVnrArea)
boxplot(House_Price_Train$MasVnrType)
boxplot(House_Price_Train$MasVnrType)
corrplot(Correlation, method = "square")
corrplot(Correlation, method = "square")
scatterplotMatrix(~ LotFrontage+
LotArea+
OverallQual+
YearBuilt+
YearRemodAdd+
MasVnrArea+
BsmtFinSF1+
BsmtUnfSF+
TotalBsmtSF+
FirstFlrSF+
GrLivArea+
BsmtFullBath+
FullBath+
HalfBath+
BedroomAbvGr+
KitchenAbvGr+
TotRmsAbvGrd+
Fireplaces+
GarageYrBlt+
GarageCars+
GarageArea+
WoodDeckSF+
OpenPorchSF,
diagonal = "histogram",
data = House_Price_Train_Numerical)
scatterplotMatrix(~ LotFrontage+
LotArea+
OverallQual+
YearBuilt+
YearRemodAdd+
MasVnrArea+
BsmtFinSF1+
BsmtUnfSF+
TotalBsmtSF+
FirstFlrSF+
GrLivArea+
BsmtFullBath+
FullBath+
HalfBath+
BedroomAbvGr+
KitchenAbvGr+
TotRmsAbvGrd+
Fireplaces+
GarageYrBlt+
GarageCars+
GarageArea+
WoodDeckSF+
OpenPorchSF,
diagonal = "histogram",
data = House_Price_Train_Numerical)
scatterplotMatrix(~OverallQual+GrLivArea+FirstFlrSF+GarageArea+GarageCars+TotalBsmtSF, diagonal = "histogram", data = House_Price_Train_Numerical)
scatterplotMatrix(~OverallQual+GrLivArea+FirstFlrSF+GarageArea+GarageCars+TotalBsmtSF+SalePrice, diagonal = "histogram", data = House_Price_Train_Numerical)
library(ggfortify)
autoplot(LR_Model_Forward, label.size = 3)
autoplot(LR_Model_Backward, label.size = 3)
autoplot(LR_Model_Stepwise, label.size = 3)
autoplot(LR_Model, label.size = 3)
gplot(House_Price_Train_Numerical, aes(x=MSZoning, y=SalePrice, fill=MSZoning)) +
geom_boxplot(alpha=0.3) +
stat_summary(fun.y=mean, geom="point", shape=20, size=4, color="red", fill="red")+
theme(legend.position="none")+
ggtitle("Figure 4 Boxplot of SalePrice by MSZoning")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(House_Price_Train_Numerical, aes(x=MSZoning, y=SalePrice, fill=MSZoning)) +
geom_boxplot(alpha=0.3) +
stat_summary(fun.y=mean, geom="point", shape=20, size=4, color="red", fill="red")+
theme(legend.position="none")+
ggtitle("Figure 4 Boxplot of SalePrice by MSZoning")+
theme(plot.title = element_text(hjust = 0.5))
summary(LR_Model_Forward)
summary(LR_Model_Backward)
summary(LR_Model_Stepwise)
summary(LR_Model_Stepwise)
summary(LR_Model)
wd()
checkwd()
log(2)
log(10)
?log()
log(99)
# Part b - Understanding default base for the log function
log10(99)
log(99, base = 10)
log(99, base = exp(1))
# Part a - Function to compute the log of a positive number
log(99)
log(99, base = exp(1))
# Part c - the log of a negative number
log(-99)
?ln()
# Part d - the square-root of a positive number
sqrt(16)
# Part a - Create a vector of 15 standard normal random
# variables calculate its mean and SD (Standard Deviation)
Vector <- rnorm(15)
Vector
mean(Vector)
sd(Vector)
# Part b - Change the mean to 10 and the SD to 2 to recalculate
# the vector of 15 random normal variables. Calculate its mean
# and SD
Vector <- rnorm(15, m = 10, sd = 2)
Vector
mean(Vector)
sd(Vector)
?rnorm
barplot(major_count$freq,
names = major_count$major_category,
xlab = "Number of College Graduates per Major",
col = brewer.pal(n = 8, name = "Dark2"),
horiz = TRUE)
library(fivethirtyeight)
df <- data.frame(college_recent_grads, stringsAsFactors = TRUE)
data.frame(lappy(df, function(x) (unique(x))))
library(plyr)
major_count <- count(df, "major_category")
library("RColorBrewer")
par(las = 2)
par(mar = c(5, 8, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
xlab = "Number of College Graduates per Major",
col = brewer.pal(n = 8, name = "Dark2"),
horiz = TRUE)
par(las = 2)
par(mar = c(8, 8, 4, 2))
par(las = 2)
par(mar = c(5, 12, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
xlab = "Number of College Graduates per Major",
col = brewer.pal(n = 8, name = "Dark2"),
horiz = TRUE)
par(las = 2)
par(mar = c(5, 8, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
xlab = "Number of College Graduates per Major",
col = brewer.pal(n = 8, name = "Dark2"),
horiz = TRUE)
par(las = 2)
par(mar = c(5, 15, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
xlab = "Number of College Graduates per Major",
col = brewer.pal(n = 8, name = "Dark2"),
horiz = TRUE)
par(las = 2)
par(mar = c(5, 14, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
xlab = "Number of College Graduates per Major",
col = brewer.pal(n = 8, name = "Dark2"),
horiz = TRUE)
par(las = 2)
par(mar = c(5, 15, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
xlab = "Number of College Graduates per Major",
col = brewer.pal(n = 8, name = "Dark2"),
horiz = TRUE)
browseVignettes(package = "fivethirtyeight")
data(package = "fivethirtyeight")
vignette("fivethirtyeight", package = "fivethirtyeight")
df <- data.frame(college_recent_grads)
str(df)
dim(df)
colnames(df)
ncol(df)
data.frame(lappy(df, function(x) (unique(x))))
library(plyr)
major_count <- count(df, "major_category")
class(major_count)
library("RColorBrewer")
par(las = 2)
par(mar = c(5, 15, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
main = "",
xlab = "Number of College Graduates per Major",
col = brewer.pal(n = 8, name = "Dark2"),
cex.names = 0.8,
horiz = TRUE)
major_count
sum(major_count$freq)
View(df)
barplot(major_count$freq,
names = major_count$major_category,
main = "Count of College Majors",
sub = "from Carnevale et al",
xlab = "Number of College Graduates per Major",
col = brewer.pal(n = 8, name = "Dark2"),
cex.names = 0.8,
horiz = TRUE)
par(las = 2)
par(mar = c(5, 15, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
main = 'Count of College Majors from from Carnevale et al Study"
sub = "from Carnevale et al",
xlab = "Number of College Graduates per Major",
col = brewer.pal(n = 8, name = "Dark2"),
cex.names = 0.8,
horiz = TRUE)
par(las = 2)
par(mar = c(5, 15, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
main = 'Count of College Majors from from Carnevale et al Study',
xlab = "Number of College Graduates per Major",
col = brewer.pal(n = 8, name = "Dark2"),
cex.names = 0.8,
horiz = TRUE)
library("RColorBrewer")
par(las = 2)
par(mar = c(5, 15, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
main = 'Count of College Majors from from Carnevale et al Study',
xlab = "Number of College Graduates per Major",
col = brewer.pal(n = 8, name = "Dark2"),
cex.names = 0.8,
horiz = TRUE)
barplot(major_count$freq,
names = major_count$major_category,
main = 'Count of College Majors from Carnevale et al Study',
xlab = "Number of College Graduates per Major",
col = brewer.pal(n = 8, name = "Dark2"),
cex.names = 0.8,
horiz = TRUE)
View(df)
par(las = 2)
par(mar = c(5, 15, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
main = 'Count of College Majors per Category from Carnevale et al Study',
xlab = "Number of College Graduates per Major",
col = brewer.pal(n = 8, name = "Dark2"),
cex.names = 0.8,
horiz = TRUE)
# Fitting labels
par(las = 2)
par(mar = c(5, 15, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
main = 'Count of College Majors per Category from Carnevale Study',
xlab = "Number of College Graduates per Major",
col = brewer.pal(n = 8, name = "Dark2"),
cex.names = 0.8,
horiz = TRUE)
par(las = 2)
par(mar = c(5, 15, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
main = 'Count of College Majors per Category',
xlab = "Count of College Graduates per Major",
ylab = "Category of College Majors"
col = brewer.pal(n = 8, name = "Dark2"),
cex.names = 0.8,
horiz = TRUE)
par(las = 2)
par(mar = c(5, 15, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
main = 'Count of College Majors per Category',
xlab = "Count of College Graduates per Major",
ylab = "Category of College Majors",
col = brewer.pal(n = 8, name = "Dark2"),
cex.names = 0.8,
horiz = TRUE)
par(las = 2)
par(mar = c(5, 15, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
main = 'Count of College Majors per Category',
xlab = "Count of College Graduates per Major",
col = brewer.pal(n = 8, name = "Dark2"),
cex.names = 0.8,
horiz = TRUE)
# Fitting labels
par(las = 2)
par(mar = c(5, 13, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
main = 'Count of College Majors per Category',
xlab = "Count of College Graduates per Major",
col = brewer.pal(n = 8, name = "Dark2"),
cex.names = 0.8,
horiz = TRUE)
# Fitting labels
par(las = 2)
par(mar = c(5, 12, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
main = 'Count of College Majors per Category',
xlab = "Count of College Graduates per Major",
col = brewer.pal(n = 8, name = "Dark2"),
cex.names = 0.8,
horiz = TRUE)
barplot(major_count$freq,
names = major_count$major_category,
main = 'Count of College Majors per Category',
xlab = "Count of College Majors",
col = brewer.pal(n = 8, name = "Dark2"),
cex.names = 0.8,
horiz = TRUE)
major_count
barplot(major_count$freq,
names = major_count$major_category,
main = 'Count of College Majors per Category',
xlab = "Count of College Majors",
ylim = c(0, 30),
col = brewer.pal(n = 8, name = "Dark2"),
cex.names = 0.8,
horiz = TRUE)
par(las = 2)
par(mar = c(5, 12, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
main = 'Count of College Majors per Category',
xlab = "Count of College Majors",
xlim = c(0, 30),
col = brewer.pal(n = 8, name = "Dark2"),
cex.names = 0.8,
horiz = TRUE)
major_count
par(las = 2)
par(mar = c(5, 12, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
main = 'Count of College Majors per Category',
sub =
xlab = "Count of College Majors",
xlim = c(0, 30),
col = brewer.pal(n = 8, name = "Dark2"),
cex.names = 1,
horiz = TRUE)
par(las = 2)
par(mar = c(5, 12, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
main = 'Count of College Majors per Category',
sub =
xlab = "Count of College Majors",
xlim = c(0, 30),
col = brewer.pal(n = 8, name = "Dark2"),
cex.names = 1.2,
horiz = TRUE)
par(las = 2)
par(mar = c(5, 12, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
main = 'Count of College Majors per Category',
sub =
xlab = "Count of College Majors",
xlim = c(0, 30),
col = brewer.pal(n = 8, name = "Dark2"),
horiz = TRUE)
par(las = 2)
par(mar = c(5, 12, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
main = 'Count of College Majors per Category',
sub = "Major Categories from Carnevale et al study",
xlab = "Count of College Majors",
xlim = c(0, 30),
col = brewer.pal(n = 8, name = "Dark2"),
cex.names = 0.8,
horiz = TRUE)
par(las = 2)
par(mar = c(5, 12, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
main = 'Count of College Majors per Category',
sub = "Major Categories obtained from Carnevale et al study",
xlab = "Count of College Majors",
xlim = c(0, 30),
col = brewer.pal(n = 8, name = "Dark2"),
cex.label = 1.2,
horiz = TRUE)
par(las = 2)
par(mar = c(5, 12, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
main = 'Count of College Majors per Category',
sub = "Major Categories obtained from Carnevale et al study",
xlab = "Count of College Majors",
xlim = c(0, 30),
col = brewer.pal(n = 8, name = "Dark2"),
cex.label = 0.8,
horiz = TRUE)
par(las = 2)
par(mar = c(5, 12, 4, 2))
barplot(major_count$freq,
names = major_count$major_category,
main = 'Count of College Majors per Category',
sub = "Major Categories obtained from Carnevale et al study",
xlab = "Count of College Majors",
xlim = c(0, 30),
col = brewer.pal(n = 8, name = "Dark2"),
cex.names = 0.8,
horiz = TRUE)
par(las = 2)
par(mar = c(5, 12, 2, 2))
barplot(major_count$freq,
names = major_count$major_category,
main = 'Count of College Majors per Category',
sub = "Major Categories obtained from Carnevale et al study",
xlab = "Count of College Majors",
xlim = c(0, 30),
col = brewer.pal(n = 8, name = "Dark2"),
cex.names = 0.8,
horiz = TRUE)
par(las = 2)
par(mar = c(5, 12, 2, 1))
barplot(major_count$freq,
names = major_count$major_category,
main = 'Count of College Majors per Category',
sub = "Major Categories obtained from Carnevale et al study",
xlab = "Count of College Majors",
xlim = c(0, 30),
col = brewer.pal(n = 8, name = "Dark2"),
cex.names = 0.8,
horiz = TRUE)
write.csv(df, "C:/Users/Dmitr/Desktop/MSDS 6306 - 402/Unit 4/Homework", sep=",")
write.csv(df, "C:/Users/Dmitr/Desktop/MSDS 6306 - 402/Unit 4/Homework", row.names = FALSE)
write.csv(df, "C:/Users/Dmitr/Desktop/MSDS 6306 - 402/Unit 4/Homework", row.names = FALSE)
write.csv(df, "C:/Users/Dmitr/Desktop/MSDS 6306 - 402/Unit 4/Homework", row.names = FALSE)
getwd()
setwd("C:/Users/Dmitr/Desktop/MSDS 6306 - 402/Unit 4/Homework")
write.csv(df, file = "recent-grads.csv", row.names = FALSE)
write.csv(df, file = "recent-grads", row.names = FALSE)
write.csv(df, "C:/Users/Dmitr/Desktop/MSDS 6306 - 402/Unit 4/Homework", file = "recent-grads", row.names = FALSE)
write.csv(df, "C:/Users/Dmitr/Desktop/MSDS 6306 - 402/Unit 4/Homework", file = "recent-grads.csv", row.names = FALSE)
write.csv(df, "C:/Users/Dmitr/Desktop/MSDS 6306 - 402/Unit 4/Homework/recent-grads.csv", row.names = FALSE)
write.csv(df, "C:/Users/Dmitr/Desktop/MSDS 6306 - 402/Unit 4/Homework/recent-grads.csv", row.names = FALSE)
